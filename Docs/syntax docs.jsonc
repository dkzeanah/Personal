{
   "colors": [
      "#bf7465", //hotkey brown
      "#ceac7b", //mild yellow
      "#CF68E1", //keyword purple
      "#A78CFA", //static purple
      "#dc5579", //bold pink
      "#d89aec", //gay pink
      "#56B7C3", //classy cyan
      "#98C379", //string green
      "#676E95", //comment grey
      "#B0B7C3", //vary white
      "#6495EE", //function blue
      "#FF9070" //digit orange
   ],
   "regex": { //explanation of every regex in the "ahk.tmLanguage.json" file, in the same order. keep in mind: some keyword classes may repeat, so when searching through, keep in mind what regex you're actually searching for. keep in mind: this file or extension is not mine at all, all I did was edit it, so most of the appreciation should go to the creator of the extension
      //keyword classes that are used by multiple regexes will have a number before their name. it's just so my json won't show a problem, you can completely ignore the numbers
      "1comment.ahk": "\\s*(;.*)", //everything after ;
      "2comment.ahk": { //block comment
         "begin": "^\\s*/\\*", //begins capturing everything after /* (at the start of the line)
         "end": "^\\s*\\*/" //stops the capture at */ (also at the start of the line)
      },
      "string.continuation.ahk": { //continuation section
         "begin": "^\\s*\\([ \\t]*\\n", //begins capturing if a ( is at the start of the line and is followed by a newline. won't capture if the ( is followed by anything other than any number of spaces, tabs or a newline (i.e. â€” won't capture (word
         "end": "^\\s*\\)" //stops the capture at the next ) that starts on a new line (no matter how many spaces are before it)
      },
      "1support.class.ahk": "\\b(?i:C_\\w+)\\(", //catches any word that starts with C_ (case insensitive) and ends with ( 
      //usage: calling a class into an object so the call looks like the coloring for the class name
      "2support.class.ahk": "\\w+(?=\\.[%]?\\w+[%]?[( ])", //catches any word that is followed by a .property or .%property% or .method() or .%method%()
      //basically, highlights the class part of a prop/method call
      "1hotkey.label.definition.ahk": "(?i: *((:[bceiknoprsxz0?\\*]{0,4}:).+(::))([^;]*))", //in :X0?:btw::by the way would catch :X0?: and ::
      "1hotkey.label.hotkey.ahk": "(?i: *((:[bceiknoprsxz0?\\*]{0,4}:).+(::))([^;]*))", //in :X0?:btw::by the way would catch btw
      "2hotkey.label.hotkey.ahk": "^\\s*(.+)(::)", //in !+Pause:: catches !+Pause
      "2hotkey.label.definition.ahk": "^\\s*(.+)(::)", //in !+Pause:: catches ::
      "directives.parameters.ahk": "#\\b\\w*(?!:{1,2})\\b([^;]*)(\\s+;.*)?$", //in #InputLevel 5 ;this sets the inputlevel catches 5
      "keyword.control.directives.ahk": "#\\b\\w*(?!:{1,2})\\b([^;]*)(\\s+;.*)?$", //in #InputLevel 5 ;this sets the inputlevel catches #InputLevel
      "3comment.ahk": "#\\b\\w*(?!:{1,2})\\b([^;]*)(\\s+;.*)?$", //in #InputLevel 5 ;this sets the inputlevel catches ;this sets the inputlevel
      "support.class.builtin.property.ahk": "\\b(?<=\\.)(?i:__item|marginx|..........|maxparams)\\b", //matches words in (?i:here|here|andhere) that go after a period
      "support.class.builtin.method.ahk": "\\b(?<=\\.)(?i:insertat|removeat|.........|isoptional)(?=\\()\\b", //matches words in (?i:here|here|andhere) that go after a period and also are followed by a (
      "variable.builtin.ahk": "\\b(?i:a_\\w+)\\b", //matches every word that starts with a_ (case insensitive)
      "keyword.control.ahk": "(?i:\\b(class)\\b\\s*(\\w+))\\s*((extends)\\s+(\\w+))?", //in class className1 extends className2 catches class and extends
      "3support.class.ahk": "(?i:\\b(class)\\b\\s*(\\w+))\\s*((extends)\\s+(\\w+))?", //in class className1 extends className2 catches className1 className2
      "2keyword.control.ahk": "\\b(?i:if|else|switch|case|return|loop|break|for|in|while|catch|finally|throw|try|until|continue|true|false)\\b", //catches the words listed
      "constant.numeric.ahk": "(?x) \\b\r\n((0(x|X)[0-9a-fA-F]*)\r\n|(\r\n  ([0-9]+\\.?[0-9]*)\r\n  |(\\.[0-9]+)\r\n )((e|E)(\\+|-)?[0-9]+)?\r\n)\\b\r\n", //catches numbers. works well so I'm not even going to try to understand this regex
      "keyword.operator.assignment.ahk": "[\\/|:*+-.~\\^]\\/?=", //
      "keyword.operator.arithmetic.ahk": "[/+\\-*\\^#]", //catches any of the characters listed. \\is the escape symbol for the ones that are special in regex, so just ignore the \\
      "keyword.operator.comparison.ahk": "[<>=!|]|[<>=]=|!(=*)|(?i:or|and|not)|&&", //catches any of the characters in the first [], any of the characters in the second [] + =, the words or, and, not, the double &&
      "keyword.operator.varref.ahk": "=>|[%?&:]", //[] mean "any single character here will be matched"
         // | means or
      "punctuation.ahk": "[`.,]", 
      "punctuation.bracket.ahk": "[\\[\\](){}]", // \\ is the escape symbol, read as [[](){}]
      "support.function.builtin.ahk": "(?<!\\.)|send(text|input|play|event|level|message|mode)?|", //the other regex is understandable as is, this means "either send or send + word in (), if there is one. (?<!\\.) means "catch only if not after a comma
      "support.function.ahk": "\\b[\\w]+(?=\\()", //catches at least one letter, digit or _ followed by a (
      "link.string.ahk": "\\s+\"http(s)?:\\/\\/.+\"\\s+", //catches a link that is a string and starts with either http or https, and has to have whitespace around it. so, ( "https://link.com" ) but not ("https://link.com")
      "string.ahk": { //catches everything inside of "" that itself isn't inside of "", meaning "yes" ""no""
         "string.start.ahk": "(\")", //starts capturing at "
         "string.end.ahk": "(\")", //stops capturing at next ". And here you have a string
         "punctuation.ahk": "`\"" //escaped quotes ( `" ) don't count, just like you'd imagine
      },
      "keyword.other.ahk": "\\b(?<!\\.)(?i:k(ey)?|v(alue)?|i(ndex)?|text|(\\w+)title|(\\w+)path|(loc(\\d?)[XY]))\\b", //a bunch of commonly used keywords and variable names. won't catch if starts with a comma like .value Built in methods and properties are caught by a different regex. To add yours, put it like this: (?i:k(ey)?|yourkeyword|v(alue)?)
      "variable.def.ahk": "\\w+" //any word :)
      //there's a "strength" system, meaning the higher a code class is, the more overruling it will be. this is why everything after ; will still be colored grey even if you have something like this() in it, this() won't be highighted as a function because comments are stronger
   }
}
//the link to the tmLanguage file. Just replace yours with this one: https://github.com/Axlefublr/Other/blob/main/Libraries%20v2/Ahk%20code%20coloring/code%20class%20regex.json 
//prebuilt settings for each code class. just paste them into your settings.json and all that's left for you to do is change the colors: https://github.com/Axlefublr/Other/blob/main/Libraries%20v2/Ahk%20code%20coloring/color%20settings%20preset.txt 
//you can use this file to check out the color changes you made. includes more or less every code class: https://github.com/Axlefublr/Other/blob/main/Libraries%20v2/Ahk%20code%20coloring/coloring%20test.ah2 